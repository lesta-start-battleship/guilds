import asyncio
from contextlib import asynccontextmanager
from typing import Any

from fastapi import FastAPI, Depends
from contextlib import asynccontextmanager

from fastapi.encoders import jsonable_encoder
from fastapi.openapi.utils import get_openapi
from aiokafka import AIOKafkaProducer
from sqlalchemy.ext.asyncio import AsyncSession
from starlette.websockets import WebSocket, WebSocketDisconnect

from api.v1 import router as v1
from db.database import get_db
from dependencies.chat import mongo_repo
from services.chat_service import get_member
from settings import settings, KAFKA_BOOTSTRAP_SERVERS
from db.database import get_db
from utils.chat_util import manager


@asynccontextmanager
async def lifespan(app: FastAPI):
    # –°–æ–∑–¥–∞–Ω–∏–µ Kafka producer –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ app.state
    producer = AIOKafkaProducer(bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS)

    await producer.start()
    print("Kafka producer started")
    app.state.producer = producer

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    yield

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–∞
    await app.state.producer.stop()
    print("Kafka producer stopped")

app = FastAPI(
    title=settings.project.title,
    description=settings.project.description,
    version=settings.project.release_version,
    debug=settings.debug,
    lifespan=lifespan
)

app.include_router(v1)


@app.websocket("/ws/guild/{guild_id}/{user_id}")
async def guild_websocket(
        guild_id: int,
        user_id: int,
        websocket: WebSocket,
        db: AsyncSession = Depends(get_db)
):
    print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: guild_id={guild_id}, user_id={user_id}")

    member = await get_member(db, user_id, guild_id)
    if not member:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–∏–ª—å–¥–∏–∏ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await manager.connect_user_only(
            websocket,
            {"type": "error",
            "data": ["–î–æ—Å—Ç—É–ø –æ—Ç–∫–∞–∑–∞–Ω: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏."]},
            close_code=1008
        )
        return
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ –≥–∏–ª—å–¥–∏–∏")

    await manager.connect(guild_id, websocket)

    try:
        history = await mongo_repo.get_messages_by_guild(guild_id)
        # todo –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—É–∏—é –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å username –≤ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await asyncio.sleep(0.1)
        await websocket.send_json({
            "type": "history",
            "data": jsonable_encoder(history)
        })
        print(f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (–∫–æ–ª-–≤–æ: {len(history)})")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", e)

    try:
        while True:
            data: Any = await websocket.receive_json()
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {data}")

            # –ü—Ä–∏–º–µ—Ä –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message = {
                "user_id": member.user_id,
                "guild_id": member.guild_id,
                # "user_name": data["user_name"],
                "content": data.get("content", ""),
            }

            try:
                saved = await mongo_repo.save_message(message)
                print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", saved)
                # todo –∑–¥–µ—Å—å —Ç–∞–∫ –∂–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–º–µ–Ω—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ID
                await manager.broadcast(guild_id, jsonable_encoder(saved))
                print("üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º")
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/—Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)


    except WebSocketDisconnect:
        print("üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    except Exception as e:
        print("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ WebSocket:", e)
    finally:
        manager.disconnect(guild_id, websocket)
        print("üßπ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")


# –Ω–µ –º–Ω–æ–≥–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–µ–º –Ω–∞—à Swagger –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ws —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )

    openapi_schema["paths"]["/api/v1/ws/guild/{guild_id}/{user_id}"] = {
        "get": {
            "summary": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è –≥–∏–ª—å–¥–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "description": "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É WebSocket –Ω—É–∂–Ω–æ:"
                           "—É–∫–∞–∑–∞—Ç—å ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–∏–ª—å–¥–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ "
                           "–ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç."
                           "–ü—Ä–∏–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ws://host:port/api/v1/ws/guild/1/1",
            "tags": ["Chat"],
            "parameters": [
                {
                    "name": "guild_id",
                    "in": "path",
                    "required": True,
                    "schema": {
                        "type": "integer",
                    }
                },
                {
                    "name": "user_id",
                    "in": "path",
                    "required": True,
                    "schema": {
                        "type": "integer",
                    }
                }
            ],
            "responses": {
                "101": {
                    "description": "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è - –ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–º.",
                }
            }
        }
    }

    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi
